@model IEnumerable<OP3.Models.Employee>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Index</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>
<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.EmpName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Salary)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.MgrCode)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Desig)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Date_of_Birth)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Date_of_Joining)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.EmpAddress)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.PassportNo)
        </th>
        <th></th>
    </tr>

@foreach (var item in Model) 
{
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.EmpName)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Salary)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.MgrCode)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Desig)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Date_of_Birth)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Date_of_Joining)
        </td>
        <td>                                                                         
            @Html.DisplayFor(modelItem => item.EmpAddress)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.PassportNo)
        </td>
        <td>
            @Html.ActionLink("Edit", "Edit", new { id=item.EmpID }) |
            @Html.ActionLink("Details", "Details", new { id=item.EmpID }) |
            @Html.ActionLink("Delete", "Delete", new { id=item.EmpID })
        </td>
    </tr>
}

</table>


                                                     cshtml
													 
													 
													 
	using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using OP3.Models;

namespace OP3.Controllers
{
    public class EmployeesController : Controller
    {
        private TrainingEntities db = new TrainingEntities();

        // GET: Employees
        public ActionResult Index()
        {
            return View(db.Employees.ToList());
        }

        // GET: Employees/Details/5
        public ActionResult Details(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Employee employee = db.Employees.Find(id);
            if (employee == null)
            {
                return HttpNotFound();
            }
            return View(employee);
        }

        // GET: Employees/Create
        public ActionResult Create()
        {
            return View();
        }

        // POST: Employees/Create
        // To protect from overposting attacks, enable the specific properties you want to bind to, for 
        // more details see https://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create([Bind(Include = "EmpID,EmpName,Salary,MgrCode,Desig,Date_of_Birth,Date_of_Joining,EmpAddress,PassportNo")] Employee employee)
        {
            if (ModelState.IsValid)
            {
                employee.EmpID = GetLastEmpId();
                db.Employees.Add(employee);
                db.SaveChanges();
                return RedirectToAction("Index");
            }

            return View(employee);
        }
        private int GetLastEmpId()
        {
            
            int maxId = db.Employees.Max(x => (int)x.EmpID);
            //Select isnull(Max(EmpID), 0) from Employee
            return maxId+1;
        }
        // GET: Employees/Edit/5
        public ActionResult Edit(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Employee employee = db.Employees.Find(id);
            if (employee == null)
            {
                return HttpNotFound();
            }
            return View(employee);
        }

        // POST: Employees/Edit/5
        // To protect from overposting attacks, enable the specific properties you want to bind to, for 
        // more details see https://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit([Bind(Include = "EmpID,EmpName,Salary,MgrCode,Desig,Date_of_Birth,Date_of_Joining,EmpAddress,PassportNo")] Employee employee)
        {
            if (ModelState.IsValid)
            {
                db.Entry(employee).State = EntityState.Modified;
                db.SaveChanges();
                return RedirectToAction("Index");
            }
            return View(employee);
        }

        // GET: Employees/Delete/5
        public ActionResult Delete(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Employee employee = db.Employees.Find(id);
            if (employee == null)
            {
                return HttpNotFound();
            }
            return View(employee);
        }

        // POST: Employees/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteConfirmed(int id)
        {
            Employee employee = db.Employees.Find(id);
            db.Employees.Remove(employee);
            db.SaveChanges();
            return RedirectToAction("Index");
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}
												 